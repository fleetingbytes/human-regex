[build-system]
requires = [
  "hatchling",
  "hatch-semver",
]
build-backend = "hatchling.build"

[project]
name = "human-regex"
dynamic = ["version"]
description = 'Regular expressions for humans'
readme = "README.md"
requires-python = ">=3.9"
license = "BSD-3-Clause"
keywords = []
authors = [
  { name = "Sven Siegmund", email = "sven.siegmund@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = []

[project.urls]
Documentation = "https://github.com/fleetingbytes/human-regex/#readme"
Issues = "https://github.com/fleetingbytes/human-regex/issues"
Source = "https://github.com/fleetingbytes/human-regex"

[tool.hatch.version]
path = "src/human_regex/__about__.py"
validate-bump = true
scheme = "semver"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/human_regex tests}"
style = [
  "ruff check {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py311"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["human_regex"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["human_regex", "tests"]
branch = true
parallel = true
omit = [
  "src/human_regex/__about__.py",
]

[tool.coverage.paths]
human_regex = ["src/human_regex", "*/human-regex/src/human_regex"]
tests = ["tests", "*/human-regex/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.towncrier]
name = "Human Regex"
package = "human_regex"
package_dir = "src"
directory = "changelog.d"
filename = "CHANGELOG.md"
start_string = "<!-- towncrier release notes start -->\n"
underlines = ["", "", ""]
template = "changelog.d/changelog_template.jinja"
title_format = "## {version} ({project_date})"
issue_format = "[#{issue}](https://github.com/fleetingbytes/human-regex/issues/{issue})"
orphan_prefix = "+"

[tool.towncrier.fragment.doc]
name = "Documentation"

[tool.towncrier.fragment.feature]
name = "New Features"

[tool.towncrier.fragment.fixed]
name = "Bugfixes"

[tool.towncrier.fragment.unimportant]
name = "Development Details"
